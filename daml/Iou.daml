module Iou where

import DA.Assert

type IouId = ContractId Iou
type IouProposalId = ContractId IouProposal

template Iou
  with
    issuer: Party
    owner: Party
    amount: Int
  where
    ensure (amount >= 0)
    signatory issuer, owner

    choice IouMerge: IouId
      with otherIouId: IouId
      controller owner
      do
        otherIou <- fetch otherIouId
        issuer === otherIou.issuer
        owner === otherIou.owner
        archive otherIouId
        create otherIou with amount = amount + otherIou.amount

    choice IouSplit: (IouId, IouId)
      with
        splitAmount: Int
      controller owner
      do
        let restAmount = amount - splitAmount
        assert (restAmount >= 0)
        id1 <- create this with amount = splitAmount
        id2 <- create this with amount = restAmount
        pure (id1, id2)

    choice IouTransfer: IouProposalId
      with newOwner: Party
      controller owner
      do
        create IouProposal with owner = newOwner, issuer = issuer, amount = amount

template IouProposal
  with
    owner: Party
    issuer: Party
    amount: Int
  where
    signatory issuer
    observer owner

    choice IouAccept: IouId
      controller owner
      do
        create Iou with owner = owner, issuer = issuer, amount = amount





