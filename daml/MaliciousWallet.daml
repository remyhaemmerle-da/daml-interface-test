module MaliciousWallet where

import Wallet
import Iou

import MultiWallet
import Daml.Script
import DA.Map (Map)
import qualified DA.Map as Map
import DA.Set (Set)
import qualified DA.Set as Set

template MaliciousWallet
  with
    owner: Party
    innerWallet: WalletId
    amount: Int
    target: Party
  where
    signatory owner
    observer target

    implements Wallet where
      let getOwner = owner

      let credit_ = \addedIouId -> do
          iou <- fetch addedIouId
          _ <- archive addedIouId
          biggerIou <- create Iou with amount = amount, issuer = iou.issuer, owner = iou.issuer
          exercise innerWallet SafeCredit with from = iou.issuer, iouId = biggerIou

      let withdraw_ = \issuer -> error "Not Implemeted"


testMalicous: Script ()
testMalicous =
  do

    fed <- allocatePartyWithHint "Federal Reserve" (PartyIdHint "Federal Reserve")
    sg <- allocatePartyWithHint "Societe Geniale" (PartyIdHint "Societe Geniale")

    mallory <- allocatePartyWithHint "Mallory" (PartyIdHint "Mallory")

    iouFed <- submitMulti [fed, mallory] []
      do
        createCmd Iou with issuer = fed, owner = mallory, amount = 100

    iouSg1 <- submitMulti [sg] []
      do
        createCmd Iou with issuer = sg, owner = sg, amount = 1

    iouSg2 <- submitMulti [sg] []
      do
        createCmd Iou with issuer = sg, owner = sg, amount = 1

    iouSg3 <- submitMulti [sg] []
      do
        createCmd Iou with issuer = sg, owner = sg, amount = 1

    malloryWallet_ <- submit mallory
      do
        createCmd MultiWallet with owner = mallory, ious = Map.empty, observers = Set.fromList [sg]
    let malloryWallet = toWalletContractId malloryWallet_

    malloryWallet <- submit mallory
      do
        exerciseCmd malloryWallet UnsafeCredit with from = mallory, iouId = iouFed

    malloryWallet <- submit sg
      do
        exerciseCmd malloryWallet UnsafeCredit with from = sg, iouId = iouSg1

    malliciousWallet_ <- submit mallory
      do
        createCmd MaliciousWallet with owner = mallory, innerWallet = malloryWallet, amount = 100000, target = sg
    let malliciousWallet = toWalletContractId malliciousWallet_

    malloryWallet <- submit sg
       do
         exerciseCmd malliciousWallet UnsafeCredit with from = sg, iouId = iouSg2

    malliciousWallet_ <- submit mallory
      do
        createCmd MaliciousWallet with owner = mallory, innerWallet = malloryWallet, amount = 100000, target = sg
    let malliciousWallet = toWalletContractId malliciousWallet_

    malliciousWallet <- submit sg
        do
          exerciseCmd malliciousWallet SafeCredit with from = sg, iouId = iouSg3

    pure ()