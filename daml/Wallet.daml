module Wallet where

import Iou

type WalletId = ContractId Wallet

template Tik
  with p: Party, i: Int
  where
    signatory p


template Bridge with
    owner: Party
  where
    signatory owner

    choice CreditImplementation : WalletId
      with
        walletId: WalletId
        iouId: IouId
      controller owner
      do
        wallet <- fetch walletId
        _ <- exercise walletId Archive_
        _ <- create (Tik owner 1000)
        credit_ wallet iouId


interface Wallet where
  getOwner: Party

  credit_: IouId -> Update WalletId
  withdraw_: Party -> Int -> Update (WalletId, IouId)

  choice UnsafeCredit: WalletId
    with
      from: Party
      iouId: IouId
    controller from
    do
      proposalId <- exercise iouId IouTransfer with newOwner = getOwner this
      newIouId <- exercise proposalId IouAccept
      credit_ this newIouId

  nonconsuming choice SafeCredit: WalletId
    with
      from: Party
      iouId: IouId
    controller from
    do
      proposalId <- exercise iouId IouTransfer with newOwner = getOwner this
      newIouId <- exercise proposalId IouAccept
      createAndExercise (Bridge $ getOwner this) CreditImplementation with walletId = self, iouId = newIouId

  choice CreditInternal: WalletId
    with
      iouId: IouId
    controller getOwner this
    do
      credit_ this iouId


  choice Withdraw: (WalletId, IouId)
    with
      issuer: Party
      amount: Int
    controller getOwner this
    do
      withdraw_ this issuer amount

  nonconsuming choice Transfer: (WalletId, WalletId)
    with
      to: WalletId
      issuer: Party
      amount: Int
    controller getOwner this
    do
      (newWalltet, iouId) <- exercise self Withdraw with
        issuer = issuer, amount = amount
      updateToWallet <- exercise to SafeCredit with
        from = getOwner this, iouId = iouId
      pure (newWalltet, updateToWallet)

  choice Archive_ : ()
    controller getOwner  this
    do
      pure ()