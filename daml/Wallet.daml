module Wallet where

import Iou

type WalletId = ContractId Wallet

interface Wallet where
  getOwner: Party

  credit_: IouId -> Update WalletId
  withdraw_: Party -> Int -> Update (WalletId, IouId)

  choice Credit: WalletId
    with
      from: Party
      iouId: IouId
    controller from
    do
      proposalId <- exercise iouId IouTransfer with newOwner = getOwner this
      newIouId <- exercise proposalId IouAccept
      -- authorization is leak toward some untrusted code
      credit_ this newIouId
      -- We can circonvent this leaking issue by limited the authorization through an internal call
      -- * make the choice nonconsuming
      -- * comment the statement above and uncomment the one below to fix the issue.
      -- exercise self CreditInternal with iouId = newIouId

  choice CreditInternal: WalletId
    with
      iouId: IouId
    controller getOwner this
    do
      credit_ this iouId

  choice Withdraw: (WalletId, IouId)
    with
      issuer: Party
      amount: Int
    controller getOwner this
    do
      withdraw_ this issuer amount

  nonconsuming choice Transfer: (WalletId, WalletId)
    with
      from: Party
      to: WalletId
      issuer: Party
      amount: Int
    controller from
    do
      (newWalltet, iouId) <- exercise self Withdraw with
        issuer = issuer, amount = amount
      updateToWallet <- exercise to Credit with
        from = from, iouId = iouId
      pure (newWalltet, updateToWallet)
