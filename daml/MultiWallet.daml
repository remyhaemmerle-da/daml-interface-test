module MultiWallet where

import Iou
import Wallet

import DA.Map (Map)
import qualified DA.Map as Map
import DA.Set (Set)
import qualified DA.Set as Set

import SimpleWallet
import Daml.Script

template MultiWallet
  with
    owner: Party
    ious: Map Party IouId
    observers: Set Party
  where
    signatory owner
    observer observers

    implements Wallet where
      let getOwner = owner

      let credit_ = \addedIouId -> do
          addedIou <- fetch addedIouId
          newIou <- case Map.lookup addedIou.issuer ious of
            None -> pure addedIouId
            Some iouId -> do exercise iouId IouMerge with otherIouId = addedIouId
          multiWalletId <- create this with ious = Map.insert addedIou.issuer newIou ious
          pure $ toWalletContractId multiWalletId

      let withdraw_ = \issuer amount -> do
          (split, rest) <- case Map.lookup issuer ious of
            None -> error "Not fund available"
            Some iou -> exercise iou IouSplit with splitAmount = amount
          newWallet <- create this with ious = Map.insert issuer rest ious
          pure (toWalletContractId newWallet, split)

    -- choice AddObserver: ContractId MultiWallet
    --   with
    --     newObserver: Party
    --   controller owner
    --   do
    --     create this with observers = Set.insert newObserver observers

    -- choice RemoveObserver: ContractId MultiWallet
    --   with
    --     deletedObserver: Party
    --   controller owner
    --   do
    --     create this with observers = Set.delete deletedObserver observers


testMulti: Script ()
testMulti =
  do

    fed <- allocatePartyWithHint "Federal Reserve" (PartyIdHint "Federal Reserve")
    snb <- allocatePartyWithHint "Swiss National Bank" (PartyIdHint "Swiss National Bank")

    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")

    iouA1 <- submitMulti [fed, alice] []
      do
        createCmd Iou with issuer = fed, owner = alice, amount = 100

    iouB1 <- submitMulti [fed, bob] []
      do
        createCmd Iou with issuer = fed, owner = bob, amount = 100

    iouB2 <- submitMulti [snb, bob] []
      do
        createCmd Iou with issuer = snb, owner = bob, amount = 100

    -- aliceWallet_ <- submit alice
    --   do
    --     createCmd SimpleWallet with owner = alice, iouId = iouA1
    -- let aliceWallet = toWalletContractId aliceWallet_

    -- bobWallet_ <- submit bob
    --   do
    --     createCmd MultiWallet with owner = bob, ious = Map.empty, observers = Set.fromList [alice]
    -- let bobWallet = toWalletContractId bobWallet_

    -- bobWallet <- submit bob
    --   do
    --     exerciseCmd bobWallet SafeCredit with from = bob, iouId = iouB1

    -- bobWallet <- submit bob
    --   do
    --     exerciseCmd bobWallet SafeCredit with from = bob, iouId = iouB2

    -- bobWallet <- submit alice
    --   do
    --     exerciseCmd aliceWallet Transfer with to = bobWallet, issuer = fed, amount = 5

    pure ()