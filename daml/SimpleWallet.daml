module SimpleWallet where

import DA.Assert
import Daml.Script

import Iou
import Wallet

template SimpleWallet
  with
    owner: Party
    iouId: IouId
  where
    signatory owner

    implements Wallet where
      let getOwner = owner

      let credit_ = \addedIouId -> do
          iou <- fetch iouId
          addedIou <- fetch addedIouId
          iou.issuer === addedIou.issuer
          newIou <- exercise iouId IouMerge with otherIouId = addedIouId
          simpleWalletId <- create this with iouId = newIou
          pure $ toWalletContractId simpleWalletId

      let withdraw_ = \issuer amount -> do
          iou <- fetch iouId
          iou.issuer === issuer
          (split, rest) <- exercise iouId IouSplit with splitAmount = amount
          simpleWalletId <- create this with iouId = rest
          pure (toWalletContractId simpleWalletId, split)

testSimple: Script ()
testSimple =
  do
    fed <- allocatePartyWithHint "Federal Reserve" (PartyIdHint "Federal Reserve")
    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")

    iouA1 <- submitMulti [fed, alice] []
        do
            createCmd Iou with issuer = fed, owner = alice, amount = 100
    iouA2 <- submitMulti [fed, alice] []
        do
            createCmd Iou with issuer = fed, owner = alice, amount = 100

    simpleWallet <- submit alice
        do
            createCmd SimpleWallet with owner = alice, iouId = iouA1
    let aliceWallet = toWalletContractId simpleWallet

    aliceWallet <- submit alice
      do
        exerciseCmd aliceWallet Credit with from = alice, iouId = iouA2


    pure ()